
.. _program_listing_file_smaug_operators_common.h:

Program Listing for File common.h
=================================

|exhale_lsh| :ref:`Return to documentation for file <file_smaug_operators_common.h>` (``smaug/operators/common.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef _OPERATORS_COMMON_H_
   #define _OPERATORS_COMMON_H_
   
   #include <stdint.h>
   
   #include "gem5/sampling_interface.h"
   
   #ifdef DMA_MODE
   #ifdef __cplusplus
   extern "C" {
   #endif
   #include "gem5/dma_interface.h"
   #ifdef __cplusplus
   }
   #endif
   #include "gem5/aladdin_sys_connection.h"
   #include "gem5/aladdin_sys_constants.h"
   #include "gem5/systolic_array_connection.h"
   #endif
   
   #ifdef __cplusplus
   // Functions for invoking kernels and mapping arrays.
   //
   // If gem5 simulation is not used, the pure software version of the accelerate
   // kernels will be invoked.
   //
   // These functions should be called from C++ files and not be included in C
   // files.
   
   #include <string>
   #include <utility>
   #include <memory>
   #include "smaug/core/globals.h"
   #include "tracer/trace_logger_aladdin.h"
   
   namespace smaug {
   
   std::string getTraceName(int accelIdx);
   
   template <typename Kernel, typename... Args>
   void invokeKernel(int accelIdx,
                     unsigned reqCode,
                     const Kernel& kernel,
                     Args&&... args) {
       if (runningInSimulation) {
           invokeAcceleratorAndBlock(reqCode);
       } else {
   #ifdef TRACE_MODE
           llvmtracer_set_trace_name(getTraceName(accelIdx).c_str());
   #endif
           kernel(std::forward<Args>(args)...);
       }
   }
   
   template <typename Kernel, typename... Args>
   void invokeKernel(unsigned reqCode, const Kernel& kernel, Args&&... args) {
       invokeKernel(0, reqCode, kernel, std::forward<Args>(args)...);
   }
   
   template <typename Kernel, typename... Args>
   std::unique_ptr<volatile int> invokeKernelNoBlock(int accelIdx,
                                                     unsigned reqCode,
                                                     const Kernel& kernel,
                                                     Args&&... args) {
       if (runningInSimulation) {
           return std::unique_ptr<volatile int>(
                   invokeAcceleratorAndReturn(reqCode));
       } else {
   #ifdef TRACE_MODE
           llvmtracer_set_trace_name(getTraceName(accelIdx).c_str());
   #endif
           kernel(std::forward<Args>(args)...);
           return nullptr;
       }
   }
   
   void mapArrayToAccel(unsigned reqCode,
                        const char* arrayName,
                        void* baseAddr,
                        size_t size);
   
   void setArrayMemTypeIfSimulating(unsigned reqCode,
                                    const char* arrayName,
                                    MemoryType memType);
   
   }  // namespace smaug
   #endif
   
   #ifdef __cplusplus
   extern "C" {
   #endif
   
   size_t next_multiple(size_t request, size_t align);
   
   #ifdef __cplusplus
   }
   #endif
   
   typedef enum _activation_type {
       NO_ACTIVATION,
       RELU,
       RELU_THRESHOLD,
       LRELU,
       ELU,
       SELU,
       TANH,
       HARD_TANH,
       SIGMOID,
       SOFTMAX
   } activation_type;
   
   typedef struct _activation_param_t {
       // LReLU
       float slope;
       // ELU/SELU
       float alpha;
       float lambda;
       // Hard Tanh
       float min;
       float max;
   } activation_param_t;
   
   #ifdef __cplusplus
   
   struct ActivationInfo {
      public:
       ActivationInfo() : function(activation_type::NO_ACTIVATION) {}
       ActivationInfo(activation_type _function) : function(_function) {
           // Use default parameters if not specified.
           switch (_function) {
               case activation_type::LRELU:
                   params.slope = 0.2;
                   break;
               case activation_type::ELU:
                   params.alpha = 0.1;
                   break;
               case activation_type::SELU:
                   params.alpha = 1.6733;
                   params.lambda = 1.0507;
                   break;
               case activation_type::HARD_TANH:
                   params.min = -1;
                   params.max = 1;
                   break;
               default:
                   break;
           }
       }
       ActivationInfo(activation_type _function, activation_param_t _params)
               : function(_function), params(_params) {}
       activation_type function;
       activation_param_t params;
   };
   #endif
   
   typedef enum _SamplingLevel {
       NoSampling = 0,
       Low = 1,
       Medium = 2,
       High = 3,
       VeryHigh = 4
   } SamplingLevel;
   
   typedef struct _SamplingInfo {
       SamplingLevel level;
       int num_sample_iterations;
   } SamplingInfo;
   
   // Scalar types.
   typedef float fp_t;
   typedef int sfx_t;
   typedef unsigned ufx_t;
   typedef uint16_t fp16_t;
   typedef uint16_t float16;
   
   #define CACHELINE_SIZE 32
   #define LOG_PAGE_SIZE 12
   
   #ifndef VECTOR_SIZE
   #define VECTOR_SIZE 8
   #endif
   
   typedef fp16_t v16fp_t
           __attribute__((__vector_size__(VECTOR_SIZE * 2 * sizeof(fp_t))));
   typedef fp_t v8fp_t
           __attribute__((__vector_size__(VECTOR_SIZE * sizeof(fp_t))));
   typedef fp_t v4fp_t
           __attribute__((__vector_size__(VECTOR_SIZE / 2 * sizeof(fp_t))));
   
   typedef fp16_t v16ph_t
           __attribute__((__vector_size__(VECTOR_SIZE * 2 * sizeof(fp16_t))));
   typedef fp16_t v8ph_t
           __attribute__((__vector_size__(VECTOR_SIZE * sizeof(fp16_t))));
   typedef fp16_t v4ph_t
           __attribute__((__vector_size__(VECTOR_SIZE / 2 * sizeof(fp16_t))));
   
   typedef sfx_t v8sfx_t
           __attribute__((__vector_size__(VECTOR_SIZE * sizeof(sfx_t))));
   typedef sfx_t v4sfx_t
           __attribute__((__vector_size__(VECTOR_SIZE / 2 * sizeof(sfx_t))));
   
   typedef uint8_t v8bl_t
           __attribute__((__vector_size__(VECTOR_SIZE * sizeof(uint8_t))));
   
   #define VEC128_MASK(input, mask) ((v4fp_t)((v4sfx_t)input & mask))
   
   #define VEC256_MASK(input, mask) ((v8fp_t)((v8sfx_t)input & mask))
   
   #if defined(__clang__)
   
   #define TO_TYPE(output_array_name, input_array_name)                           \
       output_array_name##_t output_array_name =                                  \
               (output_array_name##_t)(input_array_name)
   
   #define ARRAY_1D(TYPE, output_array_name, input_array_name)                    \
       TYPE* output_array_name = (TYPE*)input_array_name
   
   #define ARRAY_2D(TYPE, output_array_name, input_array_name, DIM_1)             \
       typedef TYPE(*output_array_name##_t)[DIM_1];                               \
       TO_TYPE(output_array_name, input_array_name)
   
   #define ARRAY_3D(TYPE, output_array_name, input_array_name, DIM_1, DIM_2)      \
       typedef TYPE(*output_array_name##_t)[DIM_1][DIM_2];                        \
       TO_TYPE(output_array_name, input_array_name)
   
   #define ARRAY_4D(                                                              \
           TYPE, output_array_name, input_array_name, DIM_1, DIM_2, DIM_3)        \
       typedef TYPE(*output_array_name##_t)[DIM_1][DIM_2][DIM_3];                 \
       TO_TYPE(output_array_name, input_array_name)
   
   #define ARRAY_5D(                                                              \
           TYPE, output_array_name, input_array_name, DIM_1, DIM_2, DIM_3, DIM_4) \
       typedef TYPE(*output_array_name##_t)[DIM_1][DIM_2][DIM_3][DIM_4];          \
       TO_TYPE(output_array_name, input_array_name)
   
   #define VEC_ARRAY_1D(TYPE, output_array_name, input_array_name)                \
       TYPE* output_array_name = (TYPE*)input_array_name
   
   #define VEC_ARRAY_2D(TYPE, output_array_name, input_array_name, cols)          \
       typedef TYPE(*output_array_name##_t)[(cols) / VECTOR_SIZE];                \
       TO_TYPE(output_array_name, input_array_name)
   
   #define VEC_ARRAY_3D(TYPE, output_array_name, input_array_name, rows, cols)    \
       typedef TYPE(*output_array_name##_t)[(rows)][(cols) / VECTOR_SIZE];        \
       TO_TYPE(output_array_name, input_array_name)
   
   #define VEC_ARRAY_4D(                                                          \
           TYPE, output_array_name, input_array_name, height, rows, cols)         \
       typedef TYPE(                                                              \
               *output_array_name##_t)[(height)][(rows)][(cols) / VECTOR_SIZE];   \
       TO_TYPE(output_array_name, input_array_name)
   
   #elif defined(__GNUC__)
   
   #define ARRAY_1D(TYPE, output_array_name, input_array_name)                    \
       TYPE* output_array_name = (TYPE*)input_array_name
   
   #define ARRAY_2D(TYPE, output_array_name, input_array_name, DIM_1)             \
       TYPE(*output_array_name)[DIM_1] = (TYPE(*)[DIM_1])input_array_name
   
   #define ARRAY_3D(TYPE, output_array_name, input_array_name, DIM_1, DIM_2)      \
       TYPE(*output_array_name)[DIM_1][DIM_2] =                                   \
           (TYPE(*)[DIM_1][DIM_2])input_array_name
   
   #define ARRAY_4D(                                                              \
       TYPE, output_array_name, input_array_name, DIM_1, DIM_2, DIM_3)            \
           TYPE(*output_array_name)[DIM_1][DIM_2][DIM_3] =                        \
               (TYPE(*)[DIM_1][DIM_2][DIM_3])input_array_name
   
   #define ARRAY_5D(                                                              \
       TYPE, output_array_name, input_array_name, DIM_1, DIM_2, DIM_3, DIM_4)     \
           TYPE(*output_array_name)[DIM_1][DIM_2][DIM_3][DIM_4] =                 \
               (TYPE(*)[DIM_1][DIM_2][DIM_3][DIM_4])input_array_name
   
   #define VEC_ARRAY_1D(TYPE, output_array_name, input_array_name)                \
       TYPE* output_array_name = (TYPE*)(input_array_name)
   
   #define VEC_ARRAY_2D(TYPE, output_array_name, input_array_name, cols)          \
       TYPE(*output_array_name)                                                   \
       [(cols) / (VECTOR_SIZE)] =                                                 \
               (TYPE(*)[(cols) / (VECTOR_SIZE)]) input_array_name
   
   #define VEC_ARRAY_3D(TYPE, output_array_name, input_array_name, rows, cols)    \
       TYPE(*output_array_name)                                                   \
       [(rows)][(cols) / (VECTOR_SIZE)] =                                         \
               (TYPE(*)[(rows)][(cols) / (VECTOR_SIZE)]) input_array_name
   
   #define VEC_ARRAY_4D(                                                          \
           TYPE, output_array_name, input_array_name, height, rows, cols)         \
       TYPE(*output_array_name)                                                   \
       [(height)][(rows)][(cols) / (VECTOR_SIZE)] =                               \
               (TYPE(*)[(height)][(rows)][(cols) / (VECTOR_SIZE)])                \
                       input_array_name
   
   #endif
   
   
   #define max2(A, B) (((A) > (B)) ? (A) : (B))
   #define max3(e0, e1, e2) max2(max2(e0, e1), e2)
   #define max4(e0, e1, e2, e3) max2(max2(e0, e1), max2(e2, e3))
   #define max8(e0, e1, e2, e3, e4, e5, e6, e7)                                   \
       max2(max4(e0, e1, e2, e3), max4(e4, e5, e6, e7))
   #define max9(e0, e1, e2, e3, e4, e5, e6, e7, e8)                               \
       max2(max8(e0, e1, e2, e3, e4, e5, e6, e7), e8)
   #define min2(A, B) (((A) < (B)) ? (A) : (B))
   
   #define FRAC_CEIL(A, B) ((A) / (B) + ((A) % (B) != 0))
   
   #ifdef TRACE_MODE
   #define ALWAYS_INLINE __attribute__((__always_inline__))
   #else
   #define ALWAYS_INLINE
   #endif
   
   #ifdef TRACE_MODE
   #define ASSERT(x)
   #else
   #define ASSERT(x) assert(x)
   #endif
   
   #ifdef TRACE_MODE
   #define ASSUME_ALIGNED(ptr, alignment) (ptr)
   #else
   #define ASSUME_ALIGNED(ptr, args...) __builtin_assume_aligned((ptr), args)
   #endif
   
   #define MAYBE_UNUSED __attribute__((__unused__))
   
   #endif
